>Introduces the concepts and skills necessary to effectively use information technology. Includes basic concepts and some practical skills with computer and networks. <strong class="italic">Prerequisites:</strong> none. </p>
////////
>Exploration of topics in mathematics and engineering
				  as they relate to classical architecture in Rome, Italy. In
				  depth geometrical
				  analysis and computer modeling of basic structures (arches,
				  vaults, domes),
				  and on-site studies of the Colosseum, Pantheon, Roman Forum,
				  and St. Peter’s Basilica. <strong class="italic">Prerequisites:</strong> Math
				  10A or Math 20A; departmental approval, and corequisite of
				  CSE 6GS.</p>
////////
>Companion course to CSE 4GS where theory is applied and lab experiments
				  are carried out “in the field” in Rome, Italy. For final projects,
				  students will select a complex structure (e.g., the Colosseum, the
				  Pantheon, St. Peter’s, etc.) to analyze and model, in detail, using computer-based
				  tools. <strong class="italic">Prerequisites:</strong> Math 10A or Math 20A; departmental
				  approval, and corequisite of CSE 4GS.</p>
////////
>Introduction to algorithms and top-down problem solving. Introduction to the C language, including functions, arrays, and standard libraries. Basic skills for using a PC graphical user interface operating system environment. File maintenance utilities are covered. A student may not receive credit for CSE 5A after receiving credit for CSE 11 or CSE 8B. Recommended preparation: A familiarity with high school-level algebra is expected, but this course assumes no prior programming knowledge. <strong class="italic">Prerequisites:</strong> restricted to undergraduates. Graduate students will be allowed as space permits. </p>
////////
>Fundamentals of computer programming and basic software design covering topics related to variables, functions, and control structures; writing, testing, and debugging programs in Matlab. Examples focus on scientific applications. Recommended preparation: high school algebra and familiarity with the computing milieu. Students with limited computing experience may take CSE 3 for preparation. Students may not take CSE 7 after completing COGS 18. Program or material fee may apply. <strong class="italic">Prerequisites:</strong> restricted to undergraduates. Graduate students will be allowed as space permits. </p>
////////
>Introductory course for students interested in computer science. Fundamental concepts of applied computer science using media computation. Exercises in the theory and practice of computer science. Hands-on experience with designing, editing, compiling, and executing programming constructs and applications. CSE 8A is part of a two-course sequence (CSE 8A and CSE 8B) that is equivalent to CSE 11. Students should take CSE 8B to complete this track. Formerly offered as corequisite courses CSE 8A plus 8AL. Students who have taken CSE 8B or CSE 11 may not take CSE 8A. Recommended preparation: No prior programming experience is assumed, but comfort using computers is helpful. Students should consult the <a href="http://cse.ucsd.edu/node/43" target="_blank">“CSE Course Placement Advice</a>” web page for assistance in choosing which CSE course to take first. <strong class="italic">Prerequisites:</strong> restricted to undergraduates. Graduate students will be allowed as space permits.</p>
////////
>Continuation of the Java language. Continuation of programming techniques. More on inheritance. Exception handling. CSE 8B is part of a two-course sequence (CSE 8A and CSE 8B) that is equivalent to CSE 11. Students should consult the <a href="http://cse.ucsd.edu/node/43" target="_blank">“CSE Course Placement Advice”</a> web page for assistance in choosing which CSE course to take first. Students may not receive credit for CSE 8B and CSE 11. <strong class="italic">Prerequisites:</strong> CSE 8A; restricted to undergraduates. Graduate students will be allowed as space permits. </p>
////////
>An accelerated introduction to computer science and programming using the Java language. Basic UNIX. Modularity and abstraction. Documentation, testing and verification techniques. Basic object-oriented programming, including inheritance and dynamic binding. Exception handling. Event-driven programming. Experience with AWT library or other similar library. Students who have completed CSE 8B may not take CSE 11. Students should consult the <a href="http://cse.ucsd.edu/node/43" target="_blank">“CSE Course Placement Advice”</a> web page for assistance in choosing which CSE course to take first. Recommended preparation: high school algebra and familiarity with computing concepts and a course in a compiled language. <strong class="italic">Prerequisites: </strong>restricted to undergraduates. Graduate students will be allowed as space permits. </p>
////////
>Use and implementation of basic data structures including linked lists, stacks, and queues. Use of advanced structures such as binary trees and hash tables. Object-oriented design including interfaces, polymorphism, encapsulation, abstract data types, pre-/post-conditions. Recursion. Uses Java and Java Collections. <strong class="italic">Prerequisites:</strong> CSE 8B or CSE 11, and concurrent enrollment with CSE 15L; restricted to undergraduates. Graduate students will be allowed as space permits. </p>
////////
>Hands-on exploration of software development
				  tools and techniques. Investigation of the scientific process
				  as applied to software development and debugging. Emphasis is on weekly
				  hands-on laboratory experiences, development of laboratory notebooking
				  techniques as applied to software design. <strong class="italic">Prerequisites: </strong>CSE 8B or CSE 11, and concurrent enrollment with CSE 12; restricted to undergraduates. Graduate students will be allowed as space permits. </p>
////////
>Basic discrete mathematical structures: sets, relations, functions, sequences, equivalence relations, partial orders, and number systems. Methods of reasoning and proofs: prepositional logic, predicate logic, induction, recursion, and pigeonhole principle. Infinite sets and diagonalization. Basic counting techniques; permutation and combinations. Applications will be given to digital logic design, elementary number theory, design of programs, and proofs of program correctness. Students who have completed Math 109 may not receive credit for CSE 20. Credit not offered for both Math 15A and CSE 20. Equivalent to Math 15A. <strong class="italic">Prerequisites:</strong> COGS 7 or CSE 8B or CSE 11. Prerequisite courses must have been completed with a grade of C– or better; restricted to undergraduates. Graduate students will be allowed as space permits.</p>
////////
>This course will provide an introduction to the discrete mathematical tools needed to analyze algorithms and systems. Enumerative combinatorics: basic counting principles, inclusion-exclusion, and generating functions. Matrix notation. Applied discrete probability. Finite automata. Credit not offered for both Math 15B and CSE 21. Equivalent to Math 15B. <strong class="italic">Prerequisites:</strong> CSE 20 or Math 15A; restricted to undergraduates. Graduate students will be allowed as space permits. </p>
////////
>Introduction to organization of modern digital
				  computers—understanding the various components of a computer
				  and their interrelationships. Study of a specific architecture/machine
				  with emphasis on systems programming in C and Assembly languages in a UNIX
				  environment. <strong class="italic">Prerequisites:</strong> CSE
			    12 and CSE 15L; restricted to undergraduates. Graduate students will be allowed as space permits.</p>
////////
>This course allows students to use what they learned in introductory programming courses to make things happen in the real world. Working in teams, students will first learn to program Arduino-based devices. Teams of students will design a custom device and program it to do their bidding. This course is targeted to freshmen and sophomores in engineering and science disciplines who want to practice applying what they have learned in a programming class and to have the chance to program things other than computers. Program or material fee may apply. <strong class="italic">Prerequisites:</strong> restricted to freshman and sophomore students; instructor approval required. </p>
////////
>The objective of the course is to help the programmer create a productive UNIX environment. Topics include customizing the shell, file system, shell programming, process management, and UNIX tools. <strong class="italic">Prerequisites:</strong> CSE 8B or CSE 11. </p>
////////
>Helps the Java programmer to be productive in the C++ programming environment. Topics include the similarities and differences between Java and C++ with special attention to pointers, operator overloading, templates, the STL, the preprocessor, and the C++ Runtime Environment. <strong class="italic">Prerequisites:</strong> CSE 12 or consent of instructor. </p>
////////
>The Freshman Seminar Program is designed to provide new students with the opportunity to explore an intellectual topic with a faculty member in a small seminar setting. Freshman Seminars are offered in all campus departments and undergraduate colleges, and topics vary from quarter to quarter. Enrollment is limited to fifteen to twenty students, with preference given to entering freshmen. <strong class="italic">Prerequisites:</strong> none. </p>
////////
>A seminar providing an overview of a topic of current research interest to the instructor. The goal is to present a specialized topic in computer science and engineering students. May be taken for credit three times when topics vary.  </p>
////////
>A seminar format discussion led by CSE faculty on topics in central areas of computer science, concentrating on the relation among them, recent developments, and future directions. <strong class="italic">Prerequisites:</strong> majors only. </p>
////////
>Independent reading or research by special arrangement with a faculty member. <strong class="italic">Prerequisites:</strong> lower-division standing. Completion of thirty units at UC San Diego with a UC San Diego GPA of 3.0. Special Studies form required. Department stamp required. Consent of instructor and approval of the department. </p>
////////
>High-performance data structures and supporting
				  algorithms. Use and implementation of data structures like (un)balanced
				  trees, graphs, priority queues, and hash tables. Also memory management,
				  pointers, recursion. Theoretical and practical performance analysis, both
				  average case and amortized. Uses C++ and STL. Credit not offered for both Math 176 and CSE 100. Equivalent to Math 176. Recommended preparation: background in C or C++ programming. <strong class="italic">Prerequisites:</strong> CSE 12, CSE 15L, CSE 21 or Math 15B or Math 154 or Math 184A, and CSE 5A or CSE 30 or ECE 15 or MAE 9; restricted to undergraduates. Graduate students will be allowed as space permits.</p>
////////
>Design and analysis of efficient algorithms with emphasis of nonnumerical algorithms such as sorting, searching, pattern matching, and graph and network algorithms. Measuring complexity of algorithms, time and storage. NP-complete problems. Credit not offered for both Math 188 and CSE 101. Equivalent to Math 188. <strong class="italic">Prerequisites: </strong>CSE 100 or Math 176; restricted to undergraduates. Graduate students will be allowed as space permits. </p>
////////
>Distributions over the real line. Independence, expectation, conditional expectation, mean, variance. Hypothesis testing. Learning classifiers. Distributions over R^n, covariance matrix. Binomial, Poisson distributions. Chernoff bound. Entropy. Compression. Arithmetic coding. Maximal likelihood estimation. Bayesian estimation. CSE 103 is not duplicate credit for ECE 109, Econ 120A, or Math 183. <strong class="italic">Prerequisites:</strong> Math 20A and Math 20B. </p>
////////
>An introduction to the mathematical theory of computability. Formal languages. Finite automata and regular expression. Push-down automata and context-free languages. Computable or recursive functions: Turing machines, the halting problem. Undecidability. Credit not offered for both Math 166 and CSE 105. Equivalent to Math 166. <strong class="italic">Prerequisites:</strong> CSE 12 and CSE 15L and Math 15A or Math 109 or CSE 20 and Math 184 or CSE 21 or Math 100A or Math 103A; restricted to students with sophomore, junior, or senior standing. Graduate students will be allowed as space permits. </p>
////////
>Topics include private and public-key cryptography, block ciphers, data encryption, authentication, key distribution and certification, pseudorandom number generators, design and analysis of protocols, zero-knowledge proofs, and advanced protocols. Emphasizes rigorous mathematical approach including formal definitions of security goals and proofs of protocol security. <strong class="italic">Prerequisites:</strong> CSE 21 or Math 15B or Math 154 or Math 184A and CSE 101 and CSE 105 or Math 166; restricted to students within the CS25, CS26, CS27, CS28, and EC26 majors. All other students will be allowed as space permits.  </p>
////////
>Introduction to software development and engineering methods,
                  including specification, design, implementation, testing, and
                  process. An emphasis on team development, agile methods, and
                  use of tools such as IDE’s, version control, and test harnesses.                  <strong class="italic">Prerequisites:</strong> CSE 100; restricted to students with junior or senior standing within the CS25, CS26, CS27, CS28, and EC26 majors. All other students will be allowed as space permits.</p>
////////
>This course will cover software engineering
				  topics associated with large systems development such as requirements
				  and specifications, testing and maintenance, and design. Specific
				  attention will be given to development tools and automated
				  support environments. <strong class="italic">Prerequisites: </strong>CSE 110; restricted to students with junior or senior standing. Graduate students will be allowed as space permits. </p>
////////
>Explores emerging opportunities enabled by cheap sensors and networked computing devices. Small research projects will be conducted in teams, culminating in project presentations at the end of the term. Section will cover material relevant to the project, such as research methods, software engineering, teamwork, and project management. <strong class="italic">Prerequisites:</strong> any course from the following: CSE 131, CSE 132B, Cog Sci 102C, Cog Sci 121, Cog Sci 184, COMT 111B, COMT 115, ECE 111, ECE 118, ECE 191, ECE 192, or ICAM 160B; or consent of instructor. </p>
////////
>Basic functions of operating systems; basic kernel structure, concurrency, memory management, virtual memory, file systems, process scheduling, security and protection. <strong class="italic">Prerequisites:</strong> CSE 30, and CSE 101, and CSE 110; restricted to students with sophomore, junior, or senior standing. Graduate students will be allowed as space permits. </p>
////////
>Introduction to concepts, principles, and practice of computer communication networks with examples from existing architectures, protocols, and standards with special emphasis on the Internet protocols. Layering and the OSI model; physical and data link layers; local and wide area networks; datagrams and virtual circuits; routing and congestion control; internetworking. Transport protocols. Credit may not be received for both CSE 123 and ECE 158A. <strong class="italic">Prerequisites:</strong> CSE 30 and CSE 101 and CSE 110; restricted to students with sophomore, junior, or senior standing sophomore, junior, or senior standing within the CS25, CS26, CS27, CS28, and EC26 majors. Graduate students will be allowed as space permits. </p>
////////
>(Renumbered from CSE 123B.) The architecture of modern networked services, including data center design, enterprise storage, fault tolerance, and load balancing. Protocol software structuring, the Transmission Control Protocol (TCP), remote procedure calls, protocols for digital audio and video communication, overlay and peer-to-peer systems, secure communication. Credit may not be received for both CSE 124 and ECE 158B. Students may not receive credit for both CSE 123B and CSE 124. <strong class="italic">Prerequisites:</strong> CSE 30 and CSE 101 and CSE 110; restricted to students with sophomore, junior, or senior standing within the CS25, CS26, CS27, CS28, and EC26 majors. Graduate students will be allowed as space permits. </p>
////////
>Design and implementation of large, complex software systems involving multiple aspects of CSE curriculum. Emphasis is on software system design applied to a single, large group project with close interaction with instructor. <strong class="italic">Prerequisites:</strong> senior standing with substantial programming experience, and consent of instructor. Department stamp required.  </p>
////////
>Topics include basic cryptography, security/threat analysis, access control, auditing, security models, distributed systems security, and theory behind common attack and defense techniques. The class will go over formal models as well as the bits and bytes of security exploits. <strong class="italic">Prerequisites:</strong> CSE 21 or Math 154 or Math 184A and CSE 120 or CSE 123 or CSE 124; restricted to students with  sophomore, junior, or senior standing within the CS25, CS26, CS27, CS28, and EC26 majors. Graduate students will be allowed as space permits.</p>
////////
>(Formerly CSE 173.) Introduction to programming languages and paradigms, the components that comprise them, and the principles of language design, all through the analysis and comparison of a variety of languages (e.g., Pascal, Ada, C++, PROLOG, ML.) Will involve programming in most languages studied. <strong class="italic">Prerequisites:</strong> CSE 12, and CSE 100 or Math 176, CSE 105 or Math 166.</p>
////////
>(Formerly CSE 131B.) Introduction to the compilation of programming languages,
				  practice of lexical and syntactic analysis, symbol tables,
				  syntax-directed translation, type checking, code generation, optimization,
				  interpretation, and compiler structure. (Students may receive repeat credit
				  for CSE 131A and CSE 131B by completing CSE 131.) <strong class="italic">Prerequisites:</strong> CSE 100 and CSE 105 and CSE 110 and CSE 130; restricted to students with sophomore, junior, or senior standing. Graduate students will be allowed as space permits.</p>
////////
>Basic concepts of databases, including data modeling, relational databases, query languages, optimization, dependencies, schema design, and concurrency control. Exposure to one or several commercial database systems. Advanced topics such as deductive and object-oriented databases, time allowing. <strong class="italic">Prerequisites:</strong> CSE 100; restricted to students with sophomore, junior, or senior standing within the CS25, CS26, CS27, CS28, and EC26 majors. All other students will be allowed as space permits.</p>
////////
>Design of databases, transactions, use of trigger facilities and datablades. Performance measuring, organization of index structures. <strong class="italic">Prerequisites:</strong> CSE 132A; restricted to students with sophomore, junior, or senior standing. Graduate students will be allowed as space permits.</p>
////////
>Design and implementation of interactive World Wide Web clients using helper applications and plug-ins. The main language covered will be Java. <strong class="italic">Prerequisites:</strong> CSE 100 or Math 176; restricted to students with sophomore, junior, or senior standing. Graduate students will be allowed as space permits.</p>
////////
>Database, data warehouse, and data cube design; SQL programming and querying with emphasis on analytics; online analytics applications, visualizations, and data exploration; performance tuning. <strong class="italic">Prerequisites:</strong> CSE 100 or Math 176; restricted to students with sophomore, junior, or senior standing within the CS25, CS26, CS27, CS28, and EC26 majors. Graduate students will be allowed as space permits.  </p>
////////
>Design and implementation of very large-scale, web-based applications. Topics covered typically include modeling organizational needs, design and revision management, J2EE or similar software platforms, web server and application server functionality, reuse of object-oriented components, model-view-controller and other design patterns, clustering, load-balancing, fault-tolerance, authentication, and usage accounting. <strong class="italic">Prerequisites: </strong>CSE 135.</p>
////////
>Design of Boolean logic and finite state machines; two-level, multilevel combinational logic design, combinational modules and modular networks, Mealy and Moore machines, analysis and synthesis of canonical forms, sequential modules. <strong class="italic">Prerequisites:</strong> CSE 20 or Math 15A or Math 109 and CSE 30; CSE 140L must be taken concurrently; restricted to students with junior or senior standing. All other students will be allowed as space permits.</p>
////////
>Implementation with computer-aided design tools for combinational logic minimization and state machine synthesis. Hardware construction of a small digital system. <strong class="italic">Prerequisites:</strong> CSE 20 or Math 15A or Math 109 and CSE 30; CSE 140 must be taken concurrently; restricted to students with junior or senior standing. All other students will be allowed as space permits.</p>
////////
>Introduction to computer architecture. Computer system design. Processor design. Control design. Memory systems. <strong class="italic">Prerequisites:</strong> CSE 30, CSE 140, and CSE 140L; CSE 141L should be taken concurrently; restricted to students with junior or senior standing. All other students will be allowed as space permits.</p>
////////
>Hands-on computer architecture project aiming to familiarize students with instruction set architecture, and design of process. Control and memory systems. <strong class="italic">Prerequisites:</strong> CSE 30 and CSE 110 and CSE 140 and CSE 140L; CSE 141 should be taken concurrently; restricted to students with junior or senior standing. All other students will be allowed as space permits.</p>
////////
>VSLI process technologies; circuit characterization; logic design styles; clocking strategies; computer-aided design tools; subsystem design; design case studies. System design project from hardware description, logic synthesis, physical layout to design verification.  <strong class="italic">Prerequisites:</strong> CSE 140 or CSE 170A or ECE 81.				</p>
////////
>Project class building an embedded computing system. Learn fundamental knowledge of microcontrollers, sensors, and actuators. Introduction to the hardware and software tools to build project in a team environment and end-to-end system building. <strong class="italic">Prerequisites:</strong> CSE 30.</p>
////////
>Students will use hardware description language tools to add advanced architectural features to a basic processor design. These features may include pipelining, superscalar execution, branch prediction, and advanced cache features. Designs will be implemented in programmable logic devices. <strong class="italic">Prerequisites:</strong> CSE 141 and CSE 141L; restricted to students with sophomore, junior, or senior standing. Graduate students will be allowed as space permits. </p>
////////
>Search algorithms including BFS, DFS, iterative deepening and A*, randomized search algorithms including Walksat, syntax and semantics of first-order logic (FOL), knowledge representation in FOL including reasoning, basic reasoning with probabilities, basic Bayesian learning. <strong class="italic">Prerequisites:</strong> CSE 100 or Math 176; restricted to students with sophomore, junior, or senior standing within the CS25, CS26, CS27, CS28, and EC26 majors. All other students will be allowed as space permits. </p>
////////
>Reasoning with probabilities, reasoning and learning with Bayesian networks, decision making under uncertainty, sequential decision making, statistical learning methods, and reinforcement learning. <strong class="italic">Prerequisites:</strong> CSE 100 or Math 176; restricted to students with sophomore, junior, or senior standing within the CS25, CS26, CS27, CS28, and EC26 majors. All other students will be allowed as space permits.</p>
////////
>The goal of computer vision is to compute scene and object properties from images and video. This introductory course includes feature detection, image segmentation, motion estimation, object recognition, and 3-D shape reconstruction through stereo, photometric stereo, and structure from motion. <strong class="italic">Prerequisites: </strong>Math 20F and CSE 100 and CSE 101 or Math 188; restricted to students with sophomore, junior, or senior standing within the CS25, CS26, CS27, CS28, and EC26 majors. All other students will be allowed as space permits.</p>
////////
>Construction of computational models that &ldquo;do the same things people do,&rdquo; in terms of perception, categorization, memory, language, action, etc. and typically in a fashion that is plausibly carried out by the neural networks in our brains. The model must fit behavioral, neurophysiological, and/or neuropsychological data. Recommended preparation: background knowledge in computer science, cognitive science, psychology, or neuroscience, and a basic understanding of the most fundamental concepts of differential calculus, linear algebra, and statistics. Computer programming skills may be useful to some students as they conduct their term projects, but such skills are not required. <strong class="italic">Prerequisites: </strong>CSE 100 or Math 176 or consent of instructor.</p>
////////
>Current methods for data mining and predictive analytics. Emphasis is on studying real-world data sets, building working systems, and putting current ideas from machine learning research into practice. <strong class="italic">Prerequisites: </strong>CSE 100; restricted to students with sophomore, junior, or senior standing. <strong></strong>Graduate students will be allowed as space permits. </p>
////////
>Introduction to high performance parallel computing: parallel architecture, algorithms, software, and problem-solving techniques. Areas covered: Flynns&#8217; taxonomy, processor-memory organizations, shared and nonshared memory models: message passing and multithreading, data parallelism; speedup, efficiency and Amdahl&#8217;s law, communication and synchronization, isoefficiency and scalability. Assignments given to provide practical experience. <strong class="italic">Prerequisites:</strong> CSE 100 or Math 176. </p>
////////
>Topics include an overview of many aspects of computer graphics, including the four main computer graphics areas of animation, modeling, rendering, and imaging. Programming projects in image and signal processing, geometric modeling, and real-time rendering. <strong class="italic">Prerequisites:</strong> CSE 167; restricted to students with junior or senior standing. Graduate students will be allowed as space permits.</p>
////////
>Principles and practices of programming graphics processing units (GPUs). GPU architecture and hardware concepts, including memory and threading models. Modern hardware-accelerated graphics pipeline programming. Application of GPU programming to rendering of game graphics, including physical, deferring, and global lighting models. Recommended preparation: <em>Practical Rendering and Computation with Direct3D 11</em> by Jason Zink, Matt Pettineo, and Jack Hoxley. <strong class="italic">Prerequisites: </strong>CSE 167.  </p>
////////
>This course focuses on design and evaluation of three-dimensional (3D) user interfaces, devices, and interaction techniques. The course consists of lectures, literature reviews, and programming assignments. Students will be expected to create interaction techniques for several different 3D interaction devices. Program or material fee may apply. <strong class="italic">Prerequisites: </strong>CSE 167. </p>
////////
>Principles of image formation, analysis, and representation. Image enhancement, restoration, and segmentation; stochastic image models. Filter design, sampling, Fourier and wavelet transforms. Selected applications in computer graphics and machine vision. <strong class="italic">Prerequisites:</strong> Math 20F, CSE 100 or Math 176. </p>
////////
>Representation and manipulation of pictorial data. Two-dimensional and three-dimensional transformations, curves, surfaces. Projection, illumination, and shading models. Raster and vector graphic I/O devices; retained-mode and immediate-mode graphics software systems and applications. Students may not receive credit for both Math 155A and CSE 167. <strong class="italic">Prerequisites:</strong> CSE 100 or Math 176. </p>
////////
>Weekly programming assignments that will cover graphics rendering algorithms. During the course the students will learn about ray tracing, geometry, tessellation, acceleration structures, sampling, filtering, shading models, and advanced topics such as global illumination and programmable graphics hardware. <strong class="italic">Prerequisites:</strong> CSE 167.  </p>
////////
>Advanced graphics focusing on the programming techniques involved in computer animation. Algorithms and approaches for both character animation and physically based animation. Particular subjects may include skeletons, skinning, key framing, facial animation, inverse kinematics, locomotion, motion capture, video game animation, particle systems, rigid bodies, clothing, and hair. Recommended preparation: An understanding of linear algebra. <strong class="italic">Prerequisites:</strong> CSE 167 or consent of instructor. </p>
////////
>Introduces fundamental methods and principles for designing, implementing, and evaluating user interfaces. Topics: user-centered design, rapid prototyping, experimentation, direct manipulation, cognitive principles, visual design, social software, software tools. Learn by doing: Work with a team on a quarter-long design project. Cross-listed with COGS 120. Students may not receive credit for COGS 120 and CSE 170. Recommended preparation: Basic familiarity with HTML. <span class="italic"><strong>Prerequisites</strong>:</span> CSE 11 or CSE 8A and COGS 187A or COGS 1 or DSGN 1.</p>
////////
>Robotics has the potential to improve well-being for millions of people and support caregivers and to aid the clinical workforce. We bring together engineers, clinicians, and end-users to explore this exciting new field. The course is project-based, interactive, and hands-on, and involves working closely with stakeholders to develop prototypes that solve real-world problems. Students will explore the latest research in health care robotics, human-robot teaming, and health design. Program or material fee may apply. <strong class="italic">Prerequisites:</strong> CSE 110 or CSE 170 or COGS 120; restricted to sophomore, junior, and senior students.</p>
////////
>Topics include an overview of various aspects of bioinformatics and will simultaneously introduce students to programming in Python. The assessments in the course represent various programming challenges and include solving diverse biological problems using popular bioinformatics tools. <strong><em>Prerequisites:</em></strong> BILD 1.</p>
////////
>This course covers the analysis of nucleic acid and protein sequences, with an emphasis on the application of algorithms to biological problems. Topics include sequence alignments, database searching, comparative genomics, and phylogenetic and clustering analyses. Pairwise alignment, multiple alignment, DNS sequencing, scoring functions, fast database search, comparative genomics, clustering, phylogenetic trees, gene finding/DNA statistics. <strong class="italic">Prerequisites:</strong> CSE 100 or Math 176 and CSE 101 or Math 188 and BIMM 100 or Chem 114C. Bioinformatics majors only. CSE 181 is cross-listed with BIMM 181 and BENG 181. </p>
////////
>This course provides an introduction to the features of biological data, how those data are organized efficiently in databases, and how existing data resources can be utilized to solve a variety of biological problems. Object oriented databases, data modeling and description. Survey of current biological database with respect to above, implementation of a database on a biological topic. Cross-listed with BIMM 182/BENG 182/CHEM 182. <strong class="italic">Prerequisites:</strong> CSE 100 or Math 176. Bioinformatics majors only.</p>
////////
>This advanced course covers the application of machine learning and modeling techniques to biological systems. Topics include gene structure, recognition of DNA and protein sequence patterns, classification, and protein structure prediction. Pattern discovery, Hidden Markov models/support victor machines/neural network/profiles. Protein structure prediction, functional characterization or proteins, functional genomics/proteomics, metabolic pathways/gene networks. Cross-listed with BIMM 184/BENG 184/Chem 184. <strong class="italic">Prerequisites: </strong>BIMM 181 or BENG 181 or CSE 181, BENG 182 or BIMM 182 or CSE 182 or CHEM 182. Bioinformatics majors only. </p>
////////
>Topics of special interest in computer science and engineering. Topics may vary from quarter to quarter. May be repeated for credit with the consent of instructor. <strong class="italic">Prerequisites:</strong> consent of instructor. Department stamp required. </p>
////////
>A seminar course on topics of current interest. Students, as well as, the instructor will be actively involved in running the course/class. This course cannot be counted toward a technical elective. <strong class="italic">Prerequisites:</strong> consent of instructor. Department stamp required.  </p>
////////
>The Senior Seminar Program is designed to allow senior undergraduates to meet with faculty members in a small group setting to explore an intellectual topic in CSE (at the upper-division level). Topics will vary from quarter to quarter. Senior seminars may be taken for credit up to four times, with a change in topic, and permission of the department. Enrollment is limited to twenty students, with preference given to seniors. (P/NP grades only.) <strong class="italic">Prerequisites: </strong>upper-division standing; department stamp required and consent of instructor.</p>
////////
>Teaching and tutorial assistance in a CSE course under the supervision of the instructor. (P/NP grades only.) <strong class="italic">Prerequisites:</strong> consent of the department chair. Department stamp required. </p>
////////
>Directed study and research at laboratories away from the campus. (P/NP grades only.) <strong class="italic">Prerequisites:</strong> consent of the instructor and approval of the department. Department stamp required. </p>
////////
>Computer science and engineering topics whose study involves reading and discussion by a small group of students under the supervision of a faculty member. (P/NP grades only.) <strong class="italic">Prerequisites:</strong> consent of the instructor. Department stamp required. </p>
////////
>Independent reading or research by special arrangement with a faculty member. (P/NP grades only.) <strong class="italic">Prerequisites:</strong> consent of the instructor. Department stamp required. </p>
////////
>Undergraduate research for completing an honors project under the supervision of a CSE faculty member. May be taken across multiple quarters. Students should enroll for a letter grade. May be taken for credit three times. <strong class="italic">Prerequisites: </strong>Admission to the CSE department honors program. Consent of the instructor. Department stamp required.</p>
////////
>&nbsp;</p>
////////
>Computability review, including halting problem, decidable sets, r.e. sets, many-one reductions; TIME(t(n)), SPACE(s(n)) and general relations between these classes; L, P, PSPACE, NP; NP—completeness; hierarchy theorems; RP, BPP. <strong class="italic">Prerequisites:</strong> CSE 105 or equivalent. </p>
////////
>Polynomial-time hierarchy (PH), BPP in second level of PH, Savitch&rsquo;s theorem, NL=coNL, nonuniform and circuit complexity, some circuit lower bounds, IP=PSPACE, probabilistic proof checking (PCP), application of PCP to approximation hardness, complexity of proof systems, parallel complexity classes NC and AC, P-completeness. Recommended preparation: CSE 200. <strong class="italic">Prerequisites:</strong> graduate standing. </p>
////////
>The basic techniques for the design and analysis of algorithms. Divide-and-conquer, dynamic programming, data structures, graph search, algebraic problems, randomized algorithms, lower bounds, probabilistic analysis, parallel algorithms. <strong class="italic">Prerequisites:</strong> CSE 101 or equivalent. </p>
////////
>Modern advances in design and analysis of algorithms. Exact syllabus varies. Topics include approximation, randomized algorithms, probabilistic analysis, heuristics, online algorithms, competitive analysis, models of memory hierarchy, parallel algorithms, number-theoretic algorithms, cryptanalysis, computational geometry, computational biology, network algorithms, VLSI CAD algorithms. <strong class="italic">Prerequisites:</strong> CSE 202. </p>
////////
>(Formerly CSE 208D) Mathematical logic as a tool in computer science. Propositional logic, resolution, first-order logic, completeness and incompleteness theorems with computational viewpoint, finite model theory, descriptive complexity, logic programming, nonmonotonic reasoning, temporal logic. Applications to databases, automatic theorem proving, program verification, and distributed systems. <strong class="italic">Prerequisites:</strong> CSE 200 or consent of instructor. </p>
////////
>(Formerly CSE 207C) Introduction to the algorithmic theory of point lattices (aka algorithmic geometry of numbers), and some of its most important applications in cryptography and cryptanalysis. Topics usually include: LLL basis reduction algorithm, cryptanalysis of broadcast RSA, hardness of approximating lattice problems. <strong class="italic">Prerequisites:</strong> CSE 202, CSE 200, or concurrent. </p>
////////
>Private and public key cryptography, introduction to reduction based proofs of security, concrete security, block ciphers, pseudorandom functions and generators, symmetric encryption, asymmetric encryption, computational number theory, RSA and discrete log systems, message authentication, digital signatures, key distribution and key management. <strong class="italic">Prerequisites:</strong> CSE 202 or consent of instructor. </p>
////////
>Zero-knowledge, secure computation, session-key distribution, protocols, electronic payment, one-way functions, trapdoor permutations, pseudorandom bit generators, hardcore bits. <strong class="italic">Prerequisites:</strong> CSE 202, CSE 200, and CSE 207 or consent of instructor. </p>
////////
>Topics of special interest in algorithms, complexity, and logic to be presented by faculty and students under faculty direction. Topics vary from quarter to quarter. May be repeated for credit. <strong class="italic">Prerequisites:</strong> consent of instructor. </p>
////////
>Topics of special interest in cryptography to be presented by faculty and students under faculty direction. Topics vary from quarter to quarter. May be repeated for credit. <strong class="italic">Prerequisites:</strong> consent of instructor. </p>
////////
>(Formerly CSE 264A.) General principles in modern software engineering. Both theoretical and practical topics are covered. Theoretical topics include proofs of correctness, programming language semantics, and theory of testing. Practical topics include structured programming, modularization techniques, design of languages for reliable programming, and software tools. <strong class="italic">Prerequisites:</strong> CSE 100, 131A, 120, or consent of instructor. </p>
////////
>Survey of testing and analysis methods. Introduction to advanced topics in area as well as traditional production methods. Topics include inspections and reviews, formal analysis, verification and validation standards, nonstatistical testing, statistical-testing and reliability models, coverage methods, testing and analysis tools, and organization management and planning. Methods special to special development approaches such as object-oriented testing will also be described. <strong class="italic">Prerequisites:</strong> undergraduate major in computer science or extensive industrial experience. </p>
////////
>Prepares students to conduct original HCI research by reading and discussing seminal and cutting-edge research papers. Topics include design, social software, input techniques, mobile, and ubiquitous computing. Student pairs perform a quarter-long mini research project that leverages campus research efforts. Cross-listed with COGS 230. <strong class="italic">Prerequisites:</strong> none.</p>
////////
>This course will cover a current topic in software engineering in depth. Topics in the past have included software tools, impacts of programming language design, and software system structure. (S/U grades permitted.) <strong class="italic">Prerequisites:</strong> none. </p>
////////
>New societal challenges, cultural values, and technological opportunities are changing design—and vice versa. The seminar explores this increased scale, real-world engagement, and disruptive impact. Invited speakers from UC San Diego and beyond share cutting-edge research on interaction, design, and learning. Cross-listed with COGS 229. (S/U grades only.) <span class="italic"><strong>Prerequisites:</strong></span> none. </p>
////////
>Operating system structures, concurrent computation models, scheduling, synchronization mechanisms, address spaces, memory management protection and security, buffering, streams, data-copying reduction techniques, file systems, naming, caching, disk organization, mapped files, remote file systems, case studies of major operating systems. <strong class="italic">Prerequisites:</strong> CSE 120 and 121, or consent of instructor. </p>
////////
>(Formerly CSE 222.) Computer communication network concepts, protocols, and architectures, with an emphasis on an analysis of algorithms, protocols, and design methodologies. Topics will include layering, error control, flow control, congestion control, switching and routing, quality of service management, mobility, naming, security, and selected contemporary topics. <strong class="italic">Prerequisites:</strong> CSE 123A or consent of instructor. </p>
////////
>(Formerly CSE 228H.) Techniques for speeding up Internet implementations, including system restructuring, new algorithms, and hardware innovations. Topics include: models for protocols, systems and hardware; efficiency principles; applying these principles to deriving techniques for efficient implementation of common endnode and router functions. <strong class="italic">Prerequisites:</strong> CSE 123A or CSE 222A, or consent of instructor. </p>
////////
>Efficient primitives for distributed operating systems and high-performance network servers, including concurrent and event-driven server architectures, remote procedure calls, and load shedding. Distributed naming, directory, and storage services, replication for fault tolerance, and security in distributed systems. <strong class="italic">Prerequisites:</strong> CSE 221, CSE 222A, or consent of instructor. </p>
////////
>Security and threat models, risk analysis, authentication and authorization, auditing, operating systems security, access control mechanisms, protection mechanisms, distributed systems/network security, security architecture, electronic commerce security mechanisms, security evaluation. <strong class="italic">Prerequisites:</strong> CSE 221 or consent of instructor. </p>
////////
>Discussion on problems of current research interest in computer systems. Possible areas of focus include: distributed computing, computational grid, operating systems, fault-tolerant computing, storage systems, system services for the World Wide Web. Topics to be presented by faculty and students under faculty direction. Topics vary from quarter to quarter. May be repeated for credit. <strong class="italic">Prerequisites:</strong> consent of instructor. </p>
////////
>Discussion on problems of current research interest in computer security. Topics to be presented by faculty and students under faculty direction. Topics vary from quarter to quarter. May be repeated for credit. <strong class="italic">Prerequisites:</strong> consent of instructor. </p>
////////
>(Formerly CSE 273.) Functional versus imperative programming. Type systems and polymorphism; the ML language. Higher order functions, lazy evaluation. Abstract versus concrete syntax, structural and well-founded induction. The lambda calculus, reduction strategies, combinators. Denotational semantics, elementary domain theory. <strong class="italic">Prerequisites:</strong> CSE 130 or equivalent, or consent of instructor. </p>
////////
>(Formerly CSE 264C.) Advanced material in
				  programming languages and translator systems. Topics include compilers,
				  code optimization, and debugging interpreters. <strong class="italic">Prerequisites:</strong> CSE
				  100, 131A–B, or consent of instructor. </p>
////////
>(Formerly CSE 264D.) Database models including relational, hierarchic, and network approaches. Implementation of databases including query languages and system architectures. <strong class="italic">Prerequisites:</strong> CSE 100 or consent of instructor. </p>
////////
>A hands-on approach to the principles of databases implementation. Algebraic rewriters/optimizers, query processors, triggers. Beyond centralized relational databases. <strong class="italic">Prerequisites:</strong> CSE 232. </p>
////////
>Theory of databases. Theory of query languages, dependency theory, deductive databases, incomplete information, complex objects, object-oriented databases, and more. Connections to logic and complexity theory including finite model theory and descriptive complexity. <strong class="italic">Prerequisites:</strong> CSE 200. </p>
////////
>Embedded system technologies including processors, DSP, memory, and software. System interfacing basics, communication strategies, sensors, and actuators. Mobile and wireless technology in embedded systems. Using predesigned hardware and software components. Design case studies in wireless, multimedia, and/or networking domains. <strong class="italic">Prerequisites:</strong> basic courses in digital hardware, algorithms and data structures, elementary calculus, and probability; or consent of instructor. </p>
////////
>Embedded computing elements, device interfaces,
				  time-critical IO handling. Embedded software design under size, performance,
				  and reliability constraints. Software timing and functional validation.
				  Programming methods and compilation for embeddable software. Embedded runtime
				  systems. Case studies of real-time software systems. <strong class="italic">Prerequisites:</strong> CSE
				  237A; or basic courses in programming, algorithms and data structures,
				  elementary calculus, discrete math, computer architecture; or consent of
				  instructor. </p>
////////
>Embedded system building blocks including
				  IP cores. Cosimulation. Formal verification using model checking. Verification
				  environments. Test challenges in core integration: compliance, feature,
				  random, and collision testing. Core access and test integration. Interface-based
				  verification and standards. <strong class="italic">Prerequisites:</strong> CSE
				  237A; or basic courses in algorithms and data structures, elementary calculus,
				  discrete math, symbolic logic, computer architecture; or consent of instructor. </p>
////////
>System representation and modeling. Abstract and language models. Simulation as a modeling activity. Computational and hw/sw system prototypes. System analysis using models. Constraint and interface modeling. Behavioral compilation and synthesis. <strong class="italic">Prerequisites:</strong> CSE 237A; or basic courses in digital logic design, algorithms and data structures, elementary calculus, discrete math, symbolic logic, computer architecture; or consent of instructor. </p>
////////
>Discussion on problems of current research
				  interest in databases. Possible areas of focus include: core database issues,
				  data management on the web, data integration, new database models and applications,
				  formal methods in databases. Topics to be presented by faculty and students
				  under faculty direction. Topics vary from quarter to quarter. May be repeated
				  for credit. <strong class="italic">Prerequisites:</strong> consent of instructor. </p>
////////
>(Formerly CSE 240.) This course will cover fundamental concepts in computer architecture. Topics include instruction set architecture, pipelining, pipeline hazards, bypassing, dynamic scheduling, branch prediction, superscalar issue, memory-hierarchy design, advanced cache architectures, and multiprocessor architecture issues. <strong class="italic">Prerequisites:</strong> CSE 141 or consent of instructor. </p>
////////
>This course covers advanced topics in parallel computer architecture, including on-chip and off-chip interconnection networks, cache coherence, cache consistency, hardware multithreading, multi-core and tiled architectures. It incorporates the latest research and development on parallel architectures and compilation techniques for those architectures. CSE 240A recommended. <strong class="italic">Prerequisites:</strong> graduate standing. </p>
////////
>This course covers advanced topics in computer architecture. It incorporates the latest research and development on topics such as branch prediction, instruction-level parallelism, cache hierarchy design, speculative multithreading, reliable architectures, and power-management techniques. CSE 240A recommended. <strong class="italic">Prerequisites:</strong> graduate standing. </p>
////////
>VLSI integrated-circuit building blocks of computing systems, and their implementation. Computer-aided design and performance simulations, design exercises and projects. Devices, standard cells and interconnects, clocking, power/ground distribution, arithmetic modules, memories. Methodologies and tradeoffs in system implementation. <strong class="italic">Prerequisites:</strong> layout (CSE 165 or ECE 260A) and logic design (CSE 140 or ECE 111), or consent of instructor. </p>
////////
>Hardware software co-design, architectural level synthesis, control synthesis and optimization, scheduling, binding, register and bus sharing, interconnect design, module selection, combinational logic optimization, state minimization, state encoding, and retiming. <strong class="italic">Prerequisites:</strong> none. </p>
////////
>Design for test, testing economics, defects, failures and faults, fault models, fault simulation, automatic test pattern generation, functional testing, memory, PLA, FPGA, microprocessor test, and fault diagnosis. <strong class="italic">Prerequisites:</strong> none. </p>
////////
>This course is about the computer algorithms, techniques, and theory used in the simulation and verification of electrical circuits. <strong class="italic">Prerequisites:</strong> CSE 241A or consent of instructor. </p>
////////
>Algorithmic techniques and optimization frameworks for large-scale, difficult optimizations. Primal-dual multicommodity flow approximations, approximations for geometric and graph Steiner formulations, continuous placement optimization, heuristics for Boolean satisfiability, multilevel methods, semidefinite programming, and application to other formulations (e.g., scheduling). <strong class="italic">Prerequisites:</strong> CSE 241A or CSE 242A, or consent of instructor. </p>
////////
>Topics of special interest in computer architecture to be presented by faculty and students under faculty direction. Topics vary from quarter to quarter. May be repeated for credit. <strong class="italic">Prerequisites:</strong> consent of instructor. </p>
////////
>Topics of special interest in VLSI to be presented by faculty and students under faculty direction. Topics vary from quarter to quarter. May be repeated for credit. <strong class="italic">Prerequisites:</strong> consent of instructor. </p>
////////
>Methods based on probability theory for reasoning and learning under uncertainty. Content may include directed and undirected probabilistic graphical models, exact and approximate inference, latent variables, expectation-maximization, hidden Markov models, Markov decision processes, applications to vision, robotics, speech, and/or text. Recommended preparation: CSE 103 or similar course. <strong class="italic">Prerequisites:</strong> graduate standing in CSE or consent of instructor.</p>
////////
>Algorithms for supervised and unsupervised learning from data. Content may include maximum likelihood; log-linear models, including logistic regression and conditional random fields; nearest neighbor methods; kernel methods; decision trees; ensemble methods; optimization algorithms; topic models; neural networks; and backpropagation.
				Recommended preparation: CSE 103 or similar course. <strong class="italic">Prerequisites:</strong> graduate standing or consent of instructor. </p>
////////
>Theoretical foundations of machine learning. Topics include concentration of measure, the PAC model, uniform convergence bounds, and VC dimension. Possible topics include online learning, learning with expert advice, multiarmed bandits, and boosting. Recommended preparation: CSE 103 and CSE 101 or similar course. <strong class="italic">Prerequisites:</strong> graduate standing or consent of instructor.</p>
////////
>Comprehensive introduction to computer vision
				  providing broad coverage including low-level vision (image
				  formation, photometry, color, image feature detection), inferring 3-D properties
				  from images (shape-from shading, stereo vision, motion interpretation)
				  and object recognition. Companion to CSE 252B covering complementary topics. <strong class="italic">Prerequisites:</strong> Math
				  10D and Math 20A–F or equivalent. </p>
////////
>Comprehensive introduction to computer vision
				  providing focused coverage of multiview geometry, structure
				  from motion, image segmentation, motion segmentation, texture analysis
				  and recognition, object detection, and image-based rendering. Companion
				  to CSE 252A covering complementary topics. <strong class="italic">Prerequisites:</strong> Math
				  10D and Math 20A–F or equivalent. </p>
////////
>Selected topics in computer vision and statistical pattern recognition, with an emphasis on recent developments. Possible topics include: grouping and segmentation, object recognition and tracking, multiple view geometry, kernel-based methods, dimensionality reduction, and mixture models. <strong class="italic">Prerequisites:</strong> CSE 252 or equivalent and CSE 250B or equivalent. </p>
////////
>Probability density estimation, perceptrons, multilayer neural networks, radial basis function networks, support vector machines, error functions, data preprocessing. Possible topics include unsupervised learning methods, recurrent networks, and mathematical learning theory. Recommended preparation: CSE 250B or equivalent. <strong class="italic">Prerequisites:</strong> graduate standing.</p>
////////
>Learning algorithms based on statistics. Possible topics include minimum-variance unbiased estimators, maximum likelihood estimation, likelihood ratio tests, resampling methods, linear logistic regression, feature selection, regularization, dimensionality reduction, manifold detection. An upper-division undergraduate course on probability and statistics such as Math 183 or 186, or any graduate course on statistics, pattern recognition, or machine learning is recommended. <strong class="italic">Prerequisites:</strong> graduate standing. </p>
////////
>Learning methods for applications. Content may include data preparation, regression and classification algorithms, support vector machines, random forests, class imbalance, overfitting, decision theory, recommender systems and collaborative filtering, text mining, analyzing social networks and social media, protecting privacy, A/B testing. Recommended preparation: CSE 103 or similar. <strong class="italic">Prerequisites:</strong> graduate standing or consent of instructor.</p>
////////
>Current methods for data mining and predictive analytics. Emphasis is on studying real-world data sets, building working systems, and putting current ideas from machine learning research into practice. Recommended preparation: No previous background in machine learning is required, but students should be comfortable with programming (all example code will be in Python), and with basic optimization and linear algebra. <strong class="italic">Prerequisites:</strong> graduate standing.</p>
////////
>Connectionist models and a sampling of other cognitive modeling techniques. Models of language processing, memory, sequential processes, and vision. Areas covered may vary depending on student and faculty interests. Can be repeated for credit. CSE 151 or CSE 250B or CSE 253 or CSE 254, or equivalent experience recommended. <strong class="italic">Prerequisites:</strong> graduate standing.</p>
////////
>A weekly meeting featuring local (and occasional external) speakers discussing their current research in Artificial Intelligence Neural Networks, and Genetic Algorithms. (S/U grades only.) <strong class="italic">Prerequisites:</strong> none. </p>
////////
>(Formerly CSE 274A.) This course provides an overview of parallel hardware, algorithms, models, and software. Topics include Flynn&#8217;s taxonomy, interconnection networks, memory organization, a survey of commercially available multiprocessors, parallel algorithm paradigms and complexity criteria, parallel programming environments and tools for parallel debugging, language specification, mapping, performance, etc. <strong class="italic">Prerequisites:</strong> graduate standing or consent of instructor. </p>
////////
>This course will explore design of software support for applications of parallel computation. Topics include: programming languages, run time support, portability, and load balancing. The course will terminate in a project. <strong class="italic">Prerequisites:</strong> consent of instructor. </p>
////////
>Computer graphics techniques for creating realistic images. Topics include ray tracing, global illumination, subsurface scattering, and participating media. CSE 168 or equivalent recommended.</p>
////////
>Selected topics in computer graphics, with an emphasis on recent developments. Possible topics include computer animation, shape modeling and analysis, image synthesis, appearance modeling, and real-time rendering. CSE 168 or CSE 169 recommended. <strong class="italic">Prerequisites:</strong> graduate standing or consent of instructor.</p>
////////
>(Formerly CSE 206B.) The course focuses on algorithmic aspects of modern bioinformatics and covers the following topics: computational gene hunting, sequencing, DNA arrays, sequence comparison, pattern discovery in DNA, genome rearrangements, molecular evolution, computational proteomics, and others. <strong class="italic">Prerequisites:</strong> CSE 202 preferred or consent of instructor.</p>
////////
>(Formerly CSE 257A/BENG 202.) Introduction to methods for sequence analysis. Applications to genome and proteome sequences. Protein structure, sequence-structure analysis. <strong class="italic">Prerequisites:</strong> Pharm 201 or consent of instructor. </p>
////////
>Annotating genomes, characterizing functional genes, profiling, reconstructing pathways. <strong class="italic">Prerequisites:</strong> Pharm 201, BENG 202/CSE 282, or consent of instructor. </p>
////////
>(Formerly CSE 280A.) A seminar course in which topics of special interest in computer science and engineering will be presented by staff members and graduate students under faculty direction. Topics vary from quarter to quarter. May be repeated for credit. (S/U grades only.) <strong class="italic">Prerequisites:</strong> consent of instructor. (Offered as faculty resources permit.) </p>
////////
>Topics of special interest in computer science and engineering. Topics may vary from quarter to quarter. May be taken for credit nine times with the consent of instructor. <strong class="italic">Prerequisites:</strong> consent of instructor. (S/U grades permitted.) (Offered as faculty resources permit.) </p>
////////
>(Formerly CSE 282.) Computer science and engineering faculty will present one-hour seminars of the current research work in their areas of interest. <strong class="italic">Prerequisites:</strong> CSE graduate status. </p>
////////
>The student will conceive, design, and execute a project in computer science under the direction of a faculty member. The project will typically include a large programming or hardware design task, but other types of projects are possible. <strong class="italic">Prerequisites:</strong> CSE graduate student status. (CS 75, 76, 77, 78, 79, 80, 81) (S/U grades only.) </p>
////////
>Advanced study and analysis of active research in computer science and computer engineering. Discussion of current research and literature in the research specialty of the staff member teaching the course. <strong class="italic">Prerequisites:</strong> consent of instructor. </p>
////////
>Open to properly qualified graduate students who wish to pursue a problem through advanced study under the direction of a member of the staff. (S/U grades only.) <strong class="italic">Prerequisites:</strong> consent of instructor. </p>
////////
>Research. <strong class="italic">Prerequisites:</strong> consent of faculty. </p>
////////
>A course in which teaching assistants are aided in learning proper teaching methods by means of supervision of their work by the faculty: handling of discussions, preparation and grading of examinations and other written exercises, and student relations. May be used to meet teaching experience requirement for candidates for the PhD degree. Number of units for credit depends on number of hours devoted to class or section assistance. <strong class="italic">Prerequisites:</strong> graduate standing and consent of instructor. </p>
////////
>Training in teaching methods in the field of computer science. This course examines theoretical and practical communication and teaching techniques particularly appropriate to computer science. <strong class="italic">Prerequisites:</strong> consent of faculty.</p>
////////
